package Utils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Sorts;

import Models.MedicalRecord;
import xyz.morphia.Datastore;
import xyz.morphia.Morphia;
import xyz.morphia.query.Query;

import Utils.MongoDBConnection;
public class MongoDBUtils {
	
	private final static Morphia morphia = new Morphia();
	
	public static Datastore storeConstruction() throws IOException {
		morphia.mapPackage("Models");
		MongoDBConnection connection = new MongoDBConnection();
		MongoClient cl 	= connection.getClient();
		// create the Datastore connecting to the default port on the local host
		Datastore datastore = morphia.createDatastore(cl, "expert_system");
		datastore.ensureIndexes();
		return datastore;
	}
	    
    public static ArrayList<MedicalRecord> getListOfMedicalRecord(String pid) throws IOException {
    	Datastore ds = storeConstruction();
    	Query<MedicalRecord> query = ds.createQuery(MedicalRecord.class);
    	List<MedicalRecord> result = query
    								.field("pId").equal(pid)
    								.order("-date")
    								.asList();
    	   	
    	ArrayList<MedicalRecord> docs = new ArrayList<MedicalRecord>();
    	for(MedicalRecord r : result) {
    		docs.add(r);
    	}
    	return docs;
    }
		
	public static ArrayList<Document> getListOfSicknesses() throws IOException {
    	MongoDBConnection connection = new MongoDBConnection();
    	//MongoClient cl 	= connection.getClient();
    	MongoDatabase db = connection.getDb();
    	MongoCollection<Document> collection = db.getCollection("sickness");
    	//Bson query = Filters.and(Filters.eq("disease", sid));
    	MongoCursor<Document> cursor = collection.find().sort(Sorts.descending("name"))	    								
					    			.iterator();
    	StringBuilder blood_sugar = new StringBuilder();
    	blood_sugar.append("{");    	
    	ArrayList<Document> docs = new ArrayList<Document>();
    	while(cursor.hasNext()) {
    		docs.add(cursor.next());
    	}
    	return docs;
    }
	
	public static String getSicknessDescription(String sicknessId) {
		MongoDBConnection connection = new MongoDBConnection();
    	MongoDatabase db = connection.getDb();
    	MongoCollection<Document> collection = db.getCollection("sickness");
    	BasicDBObject whereQuery = new BasicDBObject();
    	whereQuery.put("disease", sicknessId);
    	FindIterable<Document> cursor = collection.find(whereQuery).limit(1);
    	StringBuilder tmp = new StringBuilder();
    	for(Document doc : cursor) {
    		tmp.append(doc.getString("name") + ": " + doc.getString("description"));
    	}    	
    	return tmp.toString();
	}
}
